{"version":3,"file":"main.cfe0458d745c545937a0.bundle.js","sources":["webpack:///./src/component/atoms/button/style/style.tsx"],"sourcesContent":["/**\n * Button Component\n * @author Irfan Andriansyah <irfanandriansyah10@gmail.com>\n * @since 2019.05.13\n */\n\nimport styled, { css } from 'styled-components';\nimport { ButtonProps } from '@/component/atoms/button/button.component.tsx';\nimport { rounded } from '@/styles/styled-component/mixins/border-radius.mixin';\nimport { backgroundColor } from '@/styles/styled-component/mixins/background.mixin';\nimport { PaletteThemeInterface, ThemeInterface } from '@/interfaces/theme.interface';\nimport { boxShadow, noBoxShadow } from '@/styles/styled-component/mixins/box-shadow.mixin';\nimport { fontFace, fontColor } from '@/styles/styled-component/mixins/font.mixin';\nimport { transition } from '@/styles/styled-component/mixins/transition.mixin';\n\nconst getBackgroundStyle = (\n    palette: PaletteThemeInterface,\n    type: string,\n    disable?: boolean,\n    outline?: boolean\n): any => {\n    if (outline) {\n        return css`\n            ${backgroundColor(palette.white[0])}\n\n            &:hover,\n            &:focus {\n                ${backgroundColor(disable ? palette.white[0] : palette[type][1])}\n            }\n        `;\n    }\n\n    return css`\n        ${backgroundColor(disable ? palette[type][2] : palette[type][0])}\n\n        &:hover,\n        &:focus {\n            ${backgroundColor(disable ? palette[type][2] : palette[type][1])}\n        }\n    `;\n};\n\nconst getBorderStyle = (\n    palette: PaletteThemeInterface,\n    type: string,\n    disable?: boolean,\n    noBorder?: boolean\n): any => {\n    if (type === 'tertiary' && noBorder) {\n        return css`\n            border: 1px solid transparent;\n            background: transparent;\n        `;\n    }\n\n    if (type !== 'tertiary' && !noBorder) {\n        return css`\n            border: 1px solid ${palette[type][disable ? 2 : 0]};\n\n            &:hover,\n            &:focus {\n                border: 1px solid ${palette[type][disable ? 2 : 1]};\n            }\n        `;\n    }\n\n    return css`\n        border: 1px solid ${palette.border[0]};\n    `;\n};\n\nconst getBoxShadowStyle = (shadow?: boolean): any => {\n    if (shadow) {\n        return css`\n            ${boxShadow(css`\n                0 1px 2px rgba(0, 0, 0, 0.05),\n                0 2px 4px rgba(0, 0, 0, 0.075)\n            `)}\n\n            &:hover,\n            &:focus {\n                ${boxShadow(css`\n                    0 2px 4px rgba(0, 0, 0, 0.05),\n                    0 3px 6px rgba(0, 0, 0, 0.075),\n                    0 4px 8px rgba(0, 0, 0, 0.1)\n                `)}\n            }\n        `;\n    }\n\n    return css`\n        ${noBoxShadow()}\n    `;\n};\n\nconst getFontStyle = (theme: ThemeInterface, size?: string): any => css`\n    ${fontFace(\n        theme.typography.primary,\n        size === 'default'\n            ? theme.size.buttonFontSize.buttonFontDefault\n            : theme.size.buttonFontSize.buttonFontSmall,\n        '500',\n        'normal',\n        'normal',\n        '1.36',\n        'normal',\n        'center',\n        null\n    )}\n`;\n\nconst getFontColor = (\n    palette: PaletteThemeInterface,\n    type: string,\n    disable?: boolean,\n    outline?: boolean\n): any => {\n    if (outline) {\n        return css`\n            ${fontColor(palette[`${type}Text`][disable ? 3 : 2])}\n\n            &:hover,\n            &:focus {\n                ${fontColor(palette[`${type}Text`][disable ? 3 : 0])}\n            }\n        `;\n    }\n\n    return css`\n        ${fontColor(palette[`${type}Text`][disable ? 1 : 0])}\n\n        &:hover,\n        &:focus {\n            ${fontColor(palette[`${type}Text`][disable ? 1 : 0])}\n        }\n    `;\n};\n\nconst ButtonComponent = styled.button<ButtonProps>`\n    position: ${({ position }) => position}\n    display: ${({ display }) => display};\n    height: ${(props) => (props.size === 'default' ? '50px' : '40px')};\n    padding: ${(props) => (props.size === 'default' ? '0 15px' : '0 7.5px')};\n    cursor: ${(props) => (props.disable ? 'not-allowed' : 'pointer')};\n    align-items: center;\n    justify-content: center;\n    flex-wrap: no-wrap;\n    text-decoration: none;\n    margin: 5px;\n    outline: 0;\n\n\n    ${(props) => css`\n        ${rounded('3px')}\n        ${getBackgroundStyle(props.theme.palette, props.buttonType, props.disable, props.outline)}\n        ${getBorderStyle(props.theme.palette, props.buttonType, props.disable, props.noBorder)}\n        ${getBoxShadowStyle(props.shadow)}\n        ${getFontStyle(props.theme, props.size)}\n        ${getFontColor(props.theme.palette, props.buttonType, props.disable, props.outline)}\n        ${transition(css`0.15s cubic-bezier(0.7, 0.3, 0, 1)`)}\n    `}\n`;\n\nexport default ButtonComponent;\n"],"mappings":"AA0IA","sourceRoot":""}